import { Component, OnInit } from '@angular/core';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormsModule,
  Validators,
  ReactiveFormsModule,
  FormGroup,
} from '@angular/forms';
import { Router } from '@angular/router';
import { DropdownModule } from 'primeng/dropdown';
import { NgxSpinnerModule } from 'ngx-spinner';
import { SharedService } from '../../../../core/services/shared/shared.service';
import { Message } from '../../../../core/constants/messages';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { FloatLabelModule } from 'primeng/floatlabel';
import { MessagesModule } from 'primeng/messages';
import { Role } from '../../../../core/constants/roleConstant';
import { UserService } from '../../../../core/services/user/user.service';
@Component({
  selector: 'app-addedituser',
  standalone: true,
  imports: [
    NgxSpinnerModule,
    CommonModule,
    ButtonModule,
    RippleModule,
    ReactiveFormsModule,
    FormsModule,
    DropdownModule,
    InputTextareaModule,
    FloatLabelModule,
    InputTextModule,
    MessagesModule,
  ],
  templateUrl: './addedituser.component.html',
  styleUrl: './addedituser.component.scss',
})
export class AddedituserComponent implements OnInit {
  messages: any;
  addeditForm!: FormGroup;
  isEdit = false;
  userId: string | undefined;
  roleList: { name: string; code: string }[] = [];
  constructor(
    private router: Router,
    private sharedService: SharedService,
    private fb: FormBuilder,
    private userService: UserService
  ) {}

  ngOnInit() {
    this.initializeRoleList();
    this.assignInitialValues();
  }

  assignInitialValues() {
    this.addeditForm = this.fb.group({
      firstName: [null, Validators.required],
      lastName: [null, Validators.required],
      roleId: [null, Validators.required],
      phone: [null, Validators.required],
      email: [null, Validators.required],
      userName: [null],
      userPassword: [null],
      address: [null, Validators.required],
    });
    this.messages = [
      {
        severity: 'info',
        detail:
          'The password has been automatically generated by the system and sent to the user via email.',
      },
    ];

    if (this.router.url.includes('edit')) {
      this.sharedService.showSpinner();
      this.isEdit = true;
      const segments = this.router.url.split('/');
      this.userId = segments[segments.length - 1];
      this.patchFormData();
    }
  }

  patchFormData() {
    if (this.userId) {
      this.userService.getuserById(this.userId).subscribe(
        (user) => {
          this.addeditForm.patchValue({
            firstName: user.firstName,
            lastName: user.lastName,
            roleId: user.roleId,
            phone: user.phone,
            email: user.email,
            address: user.address,
          });
          this.sharedService.hideSpinner();
        },
        (error) => {
          this.sharedService.hideSpinner();
          this.sharedService.openSnackBar(Message.errorMsg, 'OK');
          throw error;
        }
      );
    }
  }

  initializeRoleList(): void {
    this.roleList = Object.keys(Role).map((key) => ({
      name: Role[key as keyof typeof Role],
      code: key,
    }));
  }

  onSubmit() {
    if (this.addeditForm.valid) {
      if (this.isEdit) {
        this.addeditForm.removeControl('userPassword');
      } else {
        this.addeditForm.value.userName = this.addeditForm.value.userPassword =
          this.addeditForm.value.firstName.substring(0, 4) +
          this.addeditForm.value.phone.toString().slice(-4);
      }
      this.sharedService.showSpinner();
      const userData = this.addeditForm.value;

      const saveObservable =
        this.isEdit && this.userId
          ? this.userService.updateUser(this.userId, userData)
          : this.userService.createUser(userData);

      saveObservable.subscribe(
        (res) => {
          this.sharedService.openSnackBar(res.message, 'OK');
          if (!this.isEdit) {
            const mailDetailsobj = {
              userName: this.addeditForm.value.userName,
              touserMail: this.addeditForm.value.email,
              touserPassword: this.addeditForm.value.userPassword,
              roleId: this.addeditForm.value.roleId,
            };
            this.userService.mailUser(mailDetailsobj).subscribe((res) => {
              this.sharedService.openSnackBar(res.message, 'OK');
            });
          }
          this.router.navigate(['/ins/user-details']);
          this.sharedService.hideSpinner();
        },
        (error) => {
          this.sharedService.openSnackBar(Message.errorAddeditdeleteMsg, 'OK');
          this.sharedService.hideSpinner();
          throw error;
        }
      );
    }
  }

  onCancel() {
    this.addeditForm.reset();
    this.router.navigate(['/ins/user-details']);
  }
}
